---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
    paths:
      - 'MiniTwit/**'

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  image-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./MiniTwit

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push minitwit-souffle
        uses: docker/build-push-action@v4
        with:
          context: ./MiniTwit
          file: MiniTwit/MiniTwit/Server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minitwit-souffle:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/minitwit-souffle:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/minitwit-souffle:webbuildcache,mode=max

      - name: Build and push minitwit-db
        uses: docker/build-push-action@v4
        with:
          context: ./MiniTwit
          file: MiniTwit/MiniTwit/Server/Dockerfile.database
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/minitwit-db:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/minitwit-db:mysqlbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/minitwit-db:mysqlbuildcache,mode=max
  
  deploy:
    runs-on: ubuntu-latest
    needs: image-build
    defaults:
      run:
        working-directory: ./MiniTwit

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/minitwit.key
          chmod 600 ~/.ssh/minitwit.key
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Server
        run: >
          ssh "$SSH_USER"@"$SSH_HOST"
          -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no
          "docker stop minitwit-souffle &&
          docker rm minitwit-souffle &&
          docker pull ""$DOCKER_USERNAME""/minitwit-souffle:latest &&
          docker run -d --name minitwit-souffle -p 80:80 -e ""$CONNECTION_STRING"" -e ""$SERILOG_URI"" ""$DOCKER_USERNAME""/minitwit-souffle:latest"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
          SERILOG_URI: ${{ secrets.SERILOG_URI }}

      - name: Copy files for Monitoring
        run: |
          scp -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no docker-compose-monitoring.yml "$SSH_USER"@"$SSH_HOST":docker
          scp -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no prometheus.yml "$SSH_USER"@"$SSH_HOST":docker
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_DB_HOST }}

      - name: Deploy Monitoring
        run: >
          ssh "$SSH_USER"@"$SSH_HOST"
          -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no
          "docker compose -f docker/docker-compose-monitoring.yml up -d"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_DB_HOST }}

      - name: Copy files for Logging and Deploy
        run: |
          scp -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no docker-compose-logging.yml "$SSH_USER"@"$SSH_HOST":docker
          ssh "$SSH_USER"@"$SSH_HOST" -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no "docker compose -f docker/docker-compose-logging.yml up -d"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_DB_HOST }}
