@page "/"
@inject IHttpClientFactory HttpFactory

<PageTitle>Public Timeline</PageTitle>

<AuthorizeView>
    <Authorized>
        <NewMessageTextBox _messages="_messages" OnSend="@(StateHasChanged)" />
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

<ContentDisplay text="Loading ..." obj="_messages" Error="@_error">
    <ChildContent>
        <Timeline Messages="_messages" />

        <div class="pagination m-3 d-flex">
            <button class="btn bg-primary text-white" disabled="@(_pageNumber <= 1)" @onclick="PreviousPage">Prev</button>
            <span class="m-2">Page @_pageNumber @*of @_totalPages*@</span>
            <button class="btn bg-primary text-white" @onclick="NextPage">Next</button>
            <div class="ms-auto d-flex align-items-center">
                <label for="pageSize" class="">Page Size:</label>
            </div>
            <select id="pageSize" class="m-l form-select w-auto" @bind="@_pageSize" @onclick="Refresh">
                <option value="8">8</option>
                <option value="16">16</option>
                <option value="32">32</option>
                <option value="64">64</option>
            </select>
        </div>
    </ChildContent>
</ContentDisplay>

@code {
    private List<MessageDTO>? _messages;
    private string? _error;
    private int _pageNumber = 1;
    private int _pageSize = 8;
    private int _totalPages;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMessagesAsync();
    }

    private async Task LoadMessagesAsync()
    {
        var client = HttpFactory.CreateClient("MiniTwit.UnAuth");
        var requestUri = $"api/Message?pageNumber={_pageNumber}&pageSize={_pageSize}";

        var result = await client.GetAsync(requestUri);
        
        if (!result.IsSuccessStatusCode)
        {
            _error = "Something went wrong loading the timeline";
            return;
        }

        var messages = await result.Content.ReadFromJsonAsync<List<MessageDTO>>();

        _messages = messages!;
    }

    private async Task Refresh()
    {
        await LoadMessagesAsync();
    }

    private async Task PreviousPage()
    {
        _pageNumber--;
        await LoadMessagesAsync();
    }

    private async Task NextPage()
    {
        _pageNumber++;
        await LoadMessagesAsync();
    }
}