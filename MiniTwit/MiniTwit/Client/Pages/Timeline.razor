@using Microsoft.AspNetCore.Authorization;
@using MiniTwit.Shared.DTO;
@inject HttpClient _http;
@inject AuthenticationStateProvider _authenticationStateProvider;
@page "/timeline/{Username?}";
@attribute [Authorize]

<h3>Timeline</h3>

@if (Tweets is null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (Username == currentUser || currentUser is null) // change to if Username is the name of the loged in user'
    {
        <NewMessageTextBox _messages="@Tweets" OnSend="@(() => StateHasChanged())" />
    }
    @for (int i = Tweets.Count-1; i >= 0; i--)
    {
        <div class="m-3 rounded border border-primary">
            <a href="timeline/@Tweets[i].AuthorName" class="m-2">@Tweets[i].AuthorName</a>
            <div class="m-2">@Tweets[i].Text</div>
        </div>
    }
}

@code {
    [Parameter]
    public string? Username { get; set; }

    private string? currentUser;

    public List<MessageDTO> Tweets { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SetCurrentUser();
        if (Username is null)
        {
            //TODO fix to be a small set of the lates messages
            Tweets = await _http.GetFromJsonAsync<List<MessageDTO>>($"api/Message");
        }
        else
        {
            var userid = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(c => c.Type == "sub").Value;
            Tweets = await _http.GetFromJsonAsync<List<MessageDTO>>($"api/Message/user/{userid}");
        }
    }

    async void SetCurrentUser()
    {
        currentUser = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
    }
}
