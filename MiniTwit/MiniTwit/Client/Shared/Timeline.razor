@inject HttpClient _http
@inject AuthenticationStateProvider _authStateProvider

@for (int i = Messages.Count - 1; i >= 0; i--)
{
    var message = Messages[i];
    <div class="m-3 rounded border border-primary">
        <div class="d-flex flex-row">
            <a href="timeline/@message.AuthorName" class="m-2">@message.AuthorName</a>
            <div class="m-2 text-muted">@TimeSinceOrDate(message.PubDate)</div>
            <AuthorizeView>
                <Authorized>
                    <button class="text-primary text-body m-2 rounded" @onclick="() => FollowUser(message.AuthorName)" >Follow</button>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="m-2">@Messages[i].Text</div>
    </div>
}

@code {
    [Parameter]
    public required List<MessageDTO> Messages { get; set; }

    public string TimeSinceOrDate(DateTime dateTime)
    {
        TimeSpan ts = DateTime.Now - dateTime.AddHours(1.0);

        return ts switch
        {
            _ when ts.TotalDays >= 7 => ts.ToString("MM dd, yyyy"),
            _ when ts.TotalHours >= 24 => $"{(int)Math.Floor(ts.TotalDays)} d.",
            _ when ts.TotalMinutes >= 60 => $"{(int)Math.Floor(ts.TotalHours)} h.",
            _ when ts.TotalSeconds >= 60 => $"{(int)Math.Floor(ts.TotalMinutes)} min.",
            _ => $"{(int)Math.Floor(ts.TotalSeconds)} sec."
        };
    }

    private async void FollowUser(string username)
    {
        var currentUser = await _authStateProvider.GetUserIdAsync();
        var result = await _http.PostAsync($"api/User/{currentUser}/follow/{username}", null);
        if (result.IsSuccessStatusCode)
        {
            Console.WriteLine($"follow {username} was a success");
            // TODO: do something so the button says unfollow and change the logic to unfollow the user
        }
    }
}
