@using MiniTwit.Shared.DTO;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject HttpClient _http;

<div class="">
    <EditForm EditContext="@_editContext" OnValidSubmit="SendMessage" >
        <InputTextArea id="text" class="form-control" @bind-Value="_message.Text">
        </InputTextArea>
        <button class="" type="submit">Send -></button>
    </EditForm>
</div>

@code {
    private readonly CreateMessageDTO _message = new();

    [Parameter]
    public required List<MessageDTO> _messages { get; set; }

    [Parameter]
    public EventCallback<Task> OnSend { get; set; }

    private EditContext? _editContext;


    protected override void OnInitialized()
    {
        _editContext = new EditContext(_message);
    }

    async void SendMessage()
    {
        _message.AuthorId = await _authStateProvider.GetUserIdAsync();
        var responce = await _http.PostAsJsonAsync("api/Message/add", _message);
        if (!responce.IsSuccessStatusCode) return;

        _message.Text = "";
        var message = await responce.Content.ReadFromJsonAsync<MessageDTO>();
        _messages.Add(message);

        await OnSend.InvokeAsync();
        StateHasChanged();
    }
}
